version: '3.9'

volumes:
  db-data:
  rmq-data:
  portainer_data:

services:
  portainer:
    restart: always
    image: portainer/portainer-ce:latest
    ports:
      - 8000:8000
      - 9443:9443
    volumes:
      - "portainer_data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${SSL_FILE_PATH:?err}:/certs:ro"
    command:
      --sslcert /certs/server.crt
      --sslkey /certs/server.key

  rmq:
    restart: always
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - "${SSL_FILE_PATH:?err}:/etc/ssl/certs/smswithoutborders/:ro"
      - rmq-data:/var/lib/rabbitmq/mnesia/
    build: 
      context: ./${PATH_RMQ}
      dockerfile: Dockerfile
    ports:
      - "15671:15671"
      - "15672:15672"
      - "15692:15692"
      - "5671:5671"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}

  mysql:
    restart: always
    image: mariadb:10.5
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD:?err}
      MYSQL_HOST: 127.0.0.1
    healthcheck:
      test: "mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD:?err} -e \"show databases\""
      interval: 1s
      retries: 120

  back-end:
    restart: always

    depends_on:
      mysql:
        condition: service_healthy

    ports:
      - "${BACKEND_SERVER_PORT:?err}:${BACKEND_SERVER_PORT}"
      - "${BACKEND_SERVER_PORT_SSL:?err}:${BACKEND_SERVER_PORT_SSL}"

    build: 
      context: ./${PATH_BACK_END}
      dockerfile: Dockerfile
      target: production

    volumes:
      - "${SSL_FILE_PATH:?err}:${SSL_FILE_PATH}"
      - "${THIRD_PARTY_CREDENTIALS_PATH:?err}:/usr/local/share/smswithoutborders"
      - "./${DATA_BIND_DIR:?err}:${TELEGRAM_RECORDS:?err}:rw"
      - "${SHARED_KEY:?err}:/usr/local/share/smswithoutborders/sharedkey.key"
      - "${HASHING_SALT:?err}:/usr/local/share/smswithoutborders/hashingsalt.key"
      - "${BROADCAST_WHITELIST:?err}:/usr/local/share/smswithoutborders/broadcast_list"

    environment:
      - HOST=${HOST:?err}
      - PORT=${BACKEND_SERVER_PORT:?err}

      - SHARED_KEY=/usr/local/share/smswithoutborders/sharedkey.key
      - HASHING_SALT=/usr/local/share/smswithoutborders/hashingsalt.key
      - BROADCAST_WHITELIST=/usr/local/share/smswithoutborders/broadcast_list

      - SSL_SERVER_NAME=${HOST:?err}
      - SSL_PORT=${BACKEND_SERVER_PORT_SSL:?err}
      - SSL_CERTIFICATE=${SSL_CERTIFICATE:?err}
      - SSL_KEY=${SSL_KEY:?err}
      - SSL_PEM=${SSL_PEM:?err}

      - MYSQL_HOST=mysql
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}

      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID:?err}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN:?err}
      - TWILIO_SERVICE_SID=${TWILIO_SERVICE_SID}

      - RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
      - ENABLE_RECAPTCHA=${ENABLE_RECAPTCHA:?err}
      - ORIGINS=["https://${HOST}"]

      - GMAIL_CREDENTIALS=/usr/local/share/smswithoutborders/gmail_credentials.json
      - TWITTER_CREDENTIALS=/usr/local/share/smswithoutborders/twitter_credentials.json
      - TELEGRAM_CREDENTIALS=/usr/local/share/smswithoutborders/telegram_credentials.json
      - TELEGRAM_RECORDS=${TELEGRAM_RECORDS:?err}

  telemetry-backend:
    restart: always
    depends_on:
      mysql:
        condition: service_healthy

    ports:
      - "${TELEMETRY_BACKEND_SERVER_PORT:?err}:${TELEMETRY_BACKEND_SERVER_PORT}"
      - "${TELEMETRY_BACKEND_SERVER_PORT_SSL:?err}:${TELEMETRY_BACKEND_SERVER_PORT_SSL}"

    build: 
      context: ./${PATH_TELEMETRY_BACKEND}
      dockerfile: Dockerfile
      target: production

    volumes:
      - "${SSL_FILE_PATH:?err}:${SSL_FILE_PATH}"
      - "${SHARED_KEY:?err}:/usr/local/share/smswithoutborders/sharedkey.key"

    environment:
      - HOST=${HOST:?err}
      - PORT=${TELEMETRY_BACKEND_SERVER_PORT:?err}

      - SHARED_KEY=/usr/local/share/smswithoutborders/sharedkey.key

      - SSL_SERVER_NAME=${HOST:?err}
      - SSL_PORT=${TELEMETRY_BACKEND_SERVER_PORT_SSL:?err}
      - SSL_CERTIFICATE=${SSL_CERTIFICATE:?err}
      - SSL_KEY=${SSL_KEY:?err}
      - SSL_PEM=${SSL_PEM:?err}

      - MYSQL_HOST=mysql
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}

  telemetry-frontend:
    restart: always
    depends_on:
      - telemetry-backend

    ports:
      - "8080:443"

    build: 
      context: ./${PATH_TELEMETRY_FRONTEND}
      dockerfile: Dockerfile
      target: production

    volumes:
      - "${SSL_CERTIFICATE:?err}:/usr/local/apache2/conf/server.crt"
      - "${SSL_KEY:?err}:/usr/local/apache2/conf/server.key"
      - "${SSL_PEM:?err}:/usr/local/apache2/conf/server.pem"

  front-end:
    restart: always
    depends_on:
      - back-end
    ports:
      - "80:443"
      - "443:443"
    volumes:
      - type: bind
        source: ${SSL_CERTIFICATE}
        target: /usr/local/apache2/conf/server.crt
      - type: bind
        source: ${SSL_KEY}
        target: /usr/local/apache2/conf/server.key
      - type: bind
        source: ${SSL_PEM}
        target: /usr/local/apache2/conf/server.pem
    build: 
      context: ./${PATH_FRONT_END}
      dockerfile: Dockerfile
      target: production
      args:
        - SWOB_BE_HOST="https://${HOST}:${BACKEND_SERVER_PORT_SSL}"
        - SWOB_GS_HOST="https://${GATEWAY_SERVER_HOST}:${GATEWAY_SERVER_SSL_PORT}"
        - SWOB_RECAPTCHA_ENABLE=${ENABLE_RECAPTCHA}
        - SWOB_RECAPTCHA_SITE_KEY=${RECAPTCHA_SITE_KEY}
        - SWOB_SSL_CRT_FILE=${SSL_CERTIFICATE:?err}
        - SWOB_SSL_KEY_FILE=${SSL_KEY:?err}
        - SWOB_SSL_ENABLE=true

  gateway-server:
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      rmq:
        condition: service_healthy
    volumes:
      - "${SSL_FILE_PATH:?err}:${SSL_FILE_PATH}"
      - "${THIRD_PARTY_CREDENTIALS_PATH:?err}:/usr/local/share/smswithoutborders"
      - "${SHARED_KEY:?err}:/usr/local/share/smswithoutborders/sharedkey.key"
      - "${HASHING_SALT:?err}:/usr/local/share/smswithoutborders/hashingsalt.key"
      - "./${DATA_BIND_DIR:?err}:${TELEGRAM_RECORDS:?err}:rw"
    ports:
      - "${GATEWAY_SERVER_PORT:?err}:${GATEWAY_SERVER_PORT}"
      - "${GATEWAY_SERVER_SSL_PORT:?err}:${GATEWAY_SERVER_SSL_PORT}"
    build: 
      context: ./${PATH_GATEWAY_SERVER}/.
      dockerfile: Dockerfile
      args:
        - HOST=${GATEWAY_SERVER_HOST:?err}
        - PORT=${GATEWAY_SERVER_PORT:?err}
        - SSL_PORT=${GATEWAY_SERVER_SSL_PORT:?err}
        - SSL_CERTIFICATE=${SSL_CERTIFICATE:?err}
        - SSL_KEY=${SSL_KEY:?err}
        - SSL_PEM=${SSL_PEM:?err}
    environment:
      - HOST=${GATEWAY_SERVER_HOST:?err}
      - PORT=${GATEWAY_SERVER_PORT:?err}

      - ORIGINS=["https://${HOST}"]

      - SSL_PORT=${GATEWAY_SERVER_SSL_PORT:?err}
      - SSL_CERTIFICATE=${SSL_CERTIFICATE:?err}
      - SSL_KEY=${SSL_KEY:?err}
      - SSL_PEM=${SSL_PEM:?err}

      - MYSQL_HOST=mysql
      - MYSQL_USER=${MYSQL_USER:?err}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:?err}
      - MYSQL_DATABASE=${MYSQL_DATABASE:?err}
      - SOCK_PORT=${GATEWAY_SERVER_SYNC_SOCKET_PORT:?err}
      - RSA_PR_KEY=${SSL_KEY:?err}

      - MYSQL_BE_HOST=mysql
      - MYSQL_BE_PASSWORD=${MYSQL_PASSWORD:?err}
      - MYSQL_BE_DATABASE=${MYSQL_DATABASE:?err}

      - RMQ_HOST=${RMQ_HOST:-rmq}
        # - RMQ_SSL=${RMQ_SSL:-false}
      - RMQ_SSL=false

      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}

      - PUBLISHER_ENCRYPTION_KEY=${PUBLISHER_ENCRYPTION_KEY:?err}

      - RMQ_ROUTING_KEY=${RMQ_ROUTING_KEY:-staging-smswithoutborders-routing-key}
      - RMQ_EXCHANGE=${RMQ_EXCHANGE:-staging-smswithoutborders-exchange}
      - RMQ_CONNECTION_NAME=${RMQ_CONNECTION_NAME:-staging-smswithoutborders-publisher}
      - RMQ_QUEUE_NAME=${RMQ_QUEUE_NAME:-staging-smswithoutborders-queue}

      - GMAIL_CREDENTIALS=/usr/local/share/smswithoutborders/gmail_credentials.json
      - TWITTER_CREDENTIALS=/usr/local/share/smswithoutborders/twitter_credentials.json
      - TELEGRAM_CREDENTIALS=/usr/local/share/smswithoutborders/telegram_credentials.json

      - TELEGRAM_RECORDS=${TELEGRAM_RECORDS:?err}

      - SHARED_KEY=/usr/local/share/smswithoutborders/sharedkey.key
      - HASHING_SALT=/usr/local/share/smswithoutborders/hashingsalt.key

  gateway-server-sync-socket:
    restart: always
    volumes:
      - "${SSL_FILE_PATH:?err}:${SSL_FILE_PATH}"
    ports:
      - "${GATEWAY_SERVER_SYNC_SOCKET_PORT:?err}:${GATEWAY_SERVER_SYNC_SOCKET_PORT}"
    build: ${PATH_GATEWAY_SERVER}/sockets/.
    environment:
      - HOST=${GATEWAY_SERVER_HOST:?err}
      - PORT=${GATEWAY_SERVER_SYNC_SOCKET_PORT:?err}

      - GATEWAY_SERVER_HOST=${GATEWAY_SERVER_HOST:?err}
      - GATEWAY_SERVER_PORT=${GATEWAY_SERVER_PORT:?err}
      - GATEWAY_SERVER_SSL_PORT=${GATEWAY_SERVER_SSL_PORT:?err}

      - SSL_KEY=${SSL_KEY}
      - SSL_CRT=${SSL_CERTIFICATE}
      - SSL_PEM=${SSL_PEM}

  publisher:
    restart: always
    depends_on:
      rmq:
        condition: service_healthy
    volumes:
      - "${SSL_FILE_PATH:?err}:${SSL_FILE_PATH}:ro"
      - "${THIRD_PARTY_CREDENTIALS_PATH:?err}:/usr/local/share/smswithoutborders"
      - "./${DATA_BIND_DIR:?err}:${TELEGRAM_RECORDS:?err}:rw"
    build: 
      context: ./${PATH_PUBLISHER}
      dockerfile: Dockerfile
    environment:
      - PUBLISHER_DECRYPTION_KEY=${PUBLISHER_ENCRYPTION_KEY:?err}
      - RMQ_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RMQ_PASSWORD=${RABBITMQ_DEFAULT_PASS:-guest}
      - RMQ_HOST=${RMQ_HOST:-rmq}
      - RMQ_QUEUE_NAME=${RMQ_QUEUE_NAME:-staging-smswithoutborders-queue}
      - RMQ_ROUTING_KEY=${RMQ_ROUTING_KEY:-staging-smswithoutborders-routing-key}
      - RMQ_EXCHANGE=${RMQ_EXCHANGE:-staging-smswithoutborders-exchange}
      - RMQ_CONNECTION_NAME=${RMQ_CONNECTION_NAME:-staging-smswithoutborders-consumer}
      - GMAIL_CREDENTIALS=/usr/local/share/smswithoutborders/gmail_credentials.json
      - TWITTER_CREDENTIALS=/usr/local/share/smswithoutborders/twitter_credentials.json
      - TELEGRAM_CREDENTIALS=/usr/local/share/smswithoutborders/telegram_credentials.json
      - TELEGRAM_RECORDS=${TELEGRAM_RECORDS:?err}
